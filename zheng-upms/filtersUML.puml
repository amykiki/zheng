@startuml
abstract class AbstractFilter {
#FilterConfig filterConfig
+final void init(FilterConfig filterConfig)
#String getInitParam(String paramName)
}

interface Nameable {
+ void setName(String name)
}

abstract class NameableFilter {
-String name
#String getName()
}

abstract class OncePerRequestFilter {
+ final void doFilter(ServletRequest request, \nServletResponse response, FilterChain filterChain)
#{abstract} doFilterInternal(ServletRequest request, \nServletResponse response, FilterChain chain)
}

abstract class AdviceFilter {
# boolean preHandle(ServletRequest request, \nServletResponse response)
# void postHandle(ServletRequest request, \nServletResponse response)
+ void afterCompletion(ServletRequest request, \nServletResponse response, Exception exception)
# void executeChain(ServletRequest request, \nServletResponse response, FilterChain chain)
}

interface PathConfigProcessor {
+ Filter processPathConfig(String path,\nString Config)
}

abstract class PathMatchingFilter {
# PatternMatcher pathMatcher
# Map<String, Object> appliedPaths
+ Filter processPathConfig(String path, String config)
# boolean preHandle(ServletRequest request, ServletResponse response);
# boolean onPreHandle(ServletRequest request, ServletResponse response, Object mappedValue)
}

abstract class AccessControlFilter {
- String loginUrl
+ boolean onPreHandle(ServletRequest request, \nServletResponse response, Object mappedValue)
# {abstract} boolean isAccessAllowed(ServletRequest request, \nServletResponse response, Object mappedValue)
# {abstract} boolean onAccessDenied(ServletRequest request, \nServletResponse response)
# boolean onAcessDenied(ServletRequest request, \nServletResponse response, Object mappedValue)
# void saveRequestAndRedirectToLogin(ServletRequest request, \nServletResponse response)
}
AbstractFilter <|-- NameableFilter
Nameable <|.. NameableFilter
NameableFilter <|-- OncePerRequestFilter
OncePerRequestFilter <|-- AdviceFilter
PathConfigProcessor <|.. PathMatchingFilter
AdviceFilter <|-- PathMatchingFilter
PathMatchingFilter <|-- AccessControlFilter
note top of AbstractFilter : 该抽象类的作用是重写了init方法，把filterConfig保存在变量中。\n提供getInitParam()方法来获取initConfig中的参数

note right of NameableFilter : Nameable接口用来设置名字，比如configuration中\n该filter实现了Nameable接口的setName()方法。\n假如没有显示设置name，则默认使用web.xml中的filter名字

note right of OncePerRequestFilter
Filter base class that guarantees to be just executed once per request,
on any servlet container.
It provides a doFilterInternal method with HttpServletRequest and HttpServletResponse arguments.

doFilterInternal方法在doFilter方法内部被调用，doFilter方法已是final方法，子类无法覆盖
end note

note right of AdviceFilter
该filter通过preHandle, postHandle和afterCompletion方法
为servlet启用了AOP风格的"around"通知(advice)

<b>preHandle</b>: 返回为true时，filter chain可以继续执行，为false则不行。
                  这个方法在chain被实际执行之前被调用
<b>postHandle</b>: 只有在filter chain执行时没有异常发生，允许调用‘post'通知逻辑。
                  也就是说，<b>executeChain</b>方法如果抛出异常，这个方法用于不会被调用。
                  因此在实现逻辑的时候，要注意这一点。大多数资源的<i>cleanup</i>行为是在
                  <b>afterCompletion</b>中实现的。即使chain中抛出了异常，该方法也保证会被调用。
<b>afterCompletion</b>: 即使<b>preHandle</b>返回false或者chain处理中抛出了异常，
                           该方法仍然会在<b>finally</b>块中被调用。可以用于资源清理
end note

note left of PathConfigProcessor
处理指定的配置，对给定的路径是唯一的
返回能够执行路径/配置组合的filter
end note

note right of PathMatchingFilter
处理器的基类，只处理指定路径的过滤器而放行其他的过滤器
<b>pathMatcher</b> = new AntPathMatcher();
<b>appliedPaths</b> = new LinkedHashMap<~>();
                    该集合是用来保存path-to-config entries.
                    key是需要处理的filter
                    value为该filter对应的配置的元素，在<i>config</i>元素中是以逗号分隔的值

<b>processPathConfig</b>: 方法实现了PathConfigProcessor接口，在该方法中分隔了按逗号分隔config信息，
                               并将path和values分别放入类的属性appliedPaths中。 this.appliedPaths.put(path, values)
<b>preHandle</b>: 重写了父类AdviceFilter中的preHandle方法，在该方法中判断当前的请求路径是否匹配
                  配置的path，如果不匹配，则filter链继续，如果匹配，则后续会调用isFilterChainContinued方法
                  进行判断过滤器链是否继续
<b>onPreHandle</b>: 默认返回true，该方法被isFilterChainContinued调用，子类可以根据需要来重载该方法。
                      返回true表示请求继续，false表示由该filter来直接响应
end note

note right of AccessControlFilter
该类是对资源进行访问控制和跳转到登录页面的所有过滤器的父类。
当用户没有被认证时，很多子类使用了<i>saveRequestAndRedirectToLogin</i>方法进行跳转
<b>loginUrl</b>: 该变量是跳转到登录页时，登录的url，当没有设定时，有默认值，
               应用方可以通过setLoginUrl()方法设置loginUrl的值
               通过getLoginUrl()获取现在系统的loginUrl

<b>onPreHandle</b>: 重写了父类的onPreHandle方法，
                      返回的值为 isAccessAllowed() || onAccessDenied()两个方法的并
<b>isAccessAllowed</b>: 该方法是抽象方法，需要子类覆盖。
                            返回<b>true</b>表示请求正常通过该filter
                            返回<b>false</b>表示请求需要被OnAccessDenied(request, response, mappedValue)处理
<b>onAccessDenied</b>: 本类中有两个同名的onAccessDenied方法，参数中有mappedValue的方法只是不带mappedValue方法的代理
                          重点是onAccessDenied(ServletRequest request, ServletResponse response)方法
                          该方法是一个抽象函数，子类必须覆盖，用于当请求被isAccessAllowed方法拒绝访问时处理请求
                          返回<b>true</b>表示请求继续
                          返回<b>false</b>表示子类直接处理/渲染响应
<b>saveRequestAndRedirectToLogin</b>: 当子类需要重定向到login时，这个方法很有用，该方法中有两个方法组成
                                                    saveRequest()方法把本次请求保存在session中，以便登录成功后调用
                                                    redirectToLogin()方法跳转到登录页

end note
@enduml